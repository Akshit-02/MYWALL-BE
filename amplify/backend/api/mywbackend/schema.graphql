# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules

enum YoutubeVideoType {
  VIDEO
  SHORT
}

enum MetaVideoType {
  VIDEO
  REEL
}

enum SubSectionType {
  YOUTUBE
  FACEBOOK
  INSTAGRAM
  CUSTOMLINK
  MEDIA
  LOGO
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum CustomLinkType {
  APP
  AMAZON
  FLIPKART
  EXTERNAL
  CUSTOM
  YTLINK
  IGLINK
}

enum MediaType {
  IMAGE
  VIDEO
  UNKNOWN
}

enum LogoType {
  IMAGE
}

enum DateGroupType {
  LAST30
  LAST60
  LAST90
}

enum CTAButtonType {
  EMAIL
  LINK
  CONTACT
}

type Address {
  street: String!
  city: String!
  state: String!
  country: String!
  postalCode: String!
}

type SocialLinks {
  instagram: AWSURL
  facebook: AWSURL
  twitter: AWSURL
  youtube: AWSURL
  pinterest: AWSURL
  linkedIn: AWSURL
  snapchat: AWSURL
  tiktok: AWSURL
  other: AWSURL
}

type Statistics {
  likeCount: Int
  viewCount: Int
  commentCount: Int
  favoriteCount: Int
}

type AuthToken {
  accessToken: String!
  refreshToken: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  isExpired: Boolean
}

type CTAButton {
  text: String
  link: String
  isActive: Boolean
  type: CTAButtonType
}

type SexRatioType {
  female: Float!
  male: Float!
}

type AgeGroupRatioType {
  ageGroup: String!
  percentage: Float!
}

type AnalyticsStatistics {
  likeCount: Int
  viewCount: Int
  commentCount: Int
  dateLabel: DateGroupType!
}

type Analytics {
  statistics: [AnalyticsStatistics]
  topAudienceCities: [String!]
  sexRatio: SexRatioType
  ageGroupRatio: [AgeGroupRatioType!]
}

type Influencer
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, ownerField: "username", operations: [read, update] }
      { allow: groups, groups: ["Admins"], operations: [read, update] }
    ]
  ) {
  id: String!
  name: String
  slug: ID
    @index(name: "bySlugInfluencer", queryField: "bySlugInfluencer")
    @auth(
      rules: [
        { allow: public, operations: [read] }
        { allow: owner, ownerField: "username" }
        { allow: groups, groups: ["Admins"] }
      ]
    )
  username: String
    @auth(rules: [{ allow: owner, ownerField: "username", operations: [read] }])
  bio: String
  email: AWSEmail
  phone: AWSPhone
  gender: Gender
  dob: AWSDate
  isActive: Boolean @default(value: "true")
  address: Address
  tags: [String!]
  themeColor: String
  ctaButton: [CTAButton!]
  profilePictureWithBg: String
  profilePictureWithoutBg: String
  socialLinks: SocialLinks
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  instagramMetrics: Analytics
  youtubeMetrics: Analytics
  isAnalyticsEnabled: Boolean @default(value: "true")
  isDarkThemeEnabled: Boolean @default(value: "false")
  facebookToken: AuthToken
  googleToken: AuthToken
  profileStatusCode: String
}

type YoutubeVideo
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, ownerField: "influencerId", operations: [read, update] }
      { allow: groups, groups: ["Admins"], operations: [read, update, create] }
    ]
  ) {
  id: ID!
  influencerId: String
    @index(
      name: "byInfluencerIdYoutubeVideos"
      queryField: "byInfluencerIdYoutubeVideos"
      sortKeyFields: ["createdAt"]
    )
    @auth(
      rules: [{ allow: owner, ownerField: "influencerId", operations: [read] }]
    )
  isArchived: Boolean @default(value: "false")
  videoId: String!
  position: Int
  title: String
  description: String
  type: YoutubeVideoType @default(value: "VIDEO")
  ctaButton: CTAButton
  timestamp: String
  channelTitle: String
  thumbnailUrl: String
  statistics: Statistics
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  subSections: [SubSection] @manyToMany(relationName: "SubSectionYTItems")
}

type FacebookVideo
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, ownerField: "influencerId", operations: [read, update] }
      { allow: groups, groups: ["Admins"], operations: [read, update, create] }
    ]
  ) {
  id: ID!
  influencerId: String
    @index(
      name: "byInfluencerIdFacebookVideos"
      queryField: "byInfluencerIdFacebookVideos"
      sortKeyFields: ["createdAt"]
    )
    @auth(
      rules: [{ allow: owner, ownerField: "influencerId", operations: [read] }]
    )
  isArchived: Boolean @default(value: "false")
  videoId: String!
  position: Int
  title: String
  description: String
  type: MetaVideoType!
  ctaButton: CTAButton
  timestamp: String
  sourceMediaUrl: String
  permaLink: AWSURL!
  thumbnailUrl: String
  statistics: Statistics
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  subSections: [SubSection] @manyToMany(relationName: "SubSectionFBItems")
}

type InstagramVideo
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, ownerField: "influencerId", operations: [read, update] }
      { allow: groups, groups: ["Admins"], operations: [read, update, create] }
    ]
  ) {
  id: ID!
  influencerId: String
    @index(
      name: "byInfluencerIdInstagramVideos"
      queryField: "byInfluencerIdInstagramVideos"
      sortKeyFields: ["createdAt"]
    )
    @auth(
      rules: [{ allow: owner, ownerField: "influencerId", operations: [read] }]
    )
  isArchived: Boolean @default(value: "false")
  videoId: String!
  position: Int
  title: String
  description: String
  type: MetaVideoType!
  ctaButton: CTAButton
  timestamp: String
  sourceMediaUrl: String
  permaLink: AWSURL!
  thumbnailUrl: String
  statistics: Statistics
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  subSections: [SubSection] @manyToMany(relationName: "SubSectionIGItems")
}

type CustomLink
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, ownerField: "influencerId", operations: [read, update] }
      { allow: groups, groups: ["Admins"], operations: [read, update, create] }
    ]
  ) {
  id: ID!
  influencerId: String
    @index(
      name: "byInfluencerIdCustomLinks"
      queryField: "byInfluencerIdCustomLinks"
      sortKeyFields: ["createdAt"]
    )
    @auth(
      rules: [{ allow: owner, ownerField: "influencerId", operations: [read] }]
    )
  isArchived: Boolean @default(value: "false")
  linkType: CustomLinkType!
  position: Int
  image: String
  title: String
  ctaButton: CTAButton
  description: String
  link: AWSURL!
  secondaryLink: AWSURL
  isAffiliate: Boolean @default(value: "true")
  playStoreLink: AWSURL
  appStoreLink: AWSURL
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  subSections: [SubSection] @manyToMany(relationName: "SubSectionCustomLinks")
}

type Media
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, ownerField: "influencerId", operations: [read, update] }
      { allow: groups, groups: ["Admins"], operations: [read, update, create] }
    ]
  ) {
  id: ID!
  influencerId: String
    @index(
      name: "byInfluencerIdMedias"
      queryField: "byInfluencerIdMedias"
      sortKeyFields: ["createdAt"]
    )
    @auth(
      rules: [{ allow: owner, ownerField: "influencerId", operations: [read] }]
    )
  isArchived: Boolean @default(value: "false")
  type: MediaType
  mediaPath: String!
  thumbnailUrl: String
  name: String
  size: Float
  title: String
  position: Int
  ctaButton: CTAButton
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  subSections: [SubSection] @manyToMany(relationName: "SubSectionMediaItems")
}

type Logo
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, ownerField: "influencerId", operations: [read, update] }
      { allow: groups, groups: ["Admins"], operations: [read, update, create] }
    ]
  ) {
  id: ID!
  influencerId: String
    @index(
      name: "byInfluencerIdLogos"
      queryField: "byInfluencerIdLogos"
      sortKeyFields: ["createdAt"]
    )
    @auth(
      rules: [{ allow: owner, ownerField: "influencerId", operations: [read] }]
    )
  isArchived: Boolean @default(value: "false")
  type: LogoType
  mediaPath: String!
  name: String
  size: Float
  title: String
  position: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  subSections: [SubSection] @manyToMany(relationName: "SubSectionLogoItems")
}

type SubSection
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, ownerField: "influencerId" }
      { allow: groups, groups: ["Admins"] }
    ]
  ) {
  id: ID!
  influencerId: String
    @auth(
      rules: [
        { allow: owner, ownerField: "influencerId", operations: [read, delete] }
      ]
    )
  position: Int!
  type: SubSectionType!
  title: String
  enabled: Boolean @default(value: "true")
  sectionId: ID!
    @index(
      name: "bySectionIdSubSections"
      queryField: "bySectionIdSubSections"
      sortKeyFields: ["position"]
    )

  youtubeItems: [YoutubeVideo] @manyToMany(relationName: "SubSectionYTItems")
  facebookItems: [FacebookVideo] @manyToMany(relationName: "SubSectionFBItems")
  instagramItems: [InstagramVideo]
    @manyToMany(relationName: "SubSectionIGItems")
  customLinkItems: [CustomLink]
    @manyToMany(relationName: "SubSectionCustomLinks")
  mediaItems: [Media] @manyToMany(relationName: "SubSectionMediaItems")
  logoItems: [Logo] @manyToMany(relationName: "SubSectionLogoItems")
}

type Section
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, ownerField: "influencerId" }
      { allow: groups, groups: ["Admins"] }
    ]
  ) {
  id: ID!
  influencerId: String
    @index(
      name: "byInfluencerIdSections"
      queryField: "byInfluencerIdSections"
      sortKeyFields: ["position"]
    )
    @auth(
      rules: [
        { allow: owner, ownerField: "influencerId", operations: [read, delete] }
      ]
    )
  isArchived: Boolean @default(value: "false")
  title: String!
  position: Int!
  subSections: [SubSection!]!
    @hasMany(indexName: "bySectionIdSubSections", fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum SyncResponseCode {
  SUCCESS
  FAILED
}

type SyncResponse @aws_cognito_user_pools {
  code: SyncResponseCode!
  message: String
}

type EmailResponse @aws_api_key {
  code: SyncResponseCode!
  message: String
}

input StatisticsInput {
  likeCount: Int
  viewCount: Int
  commentCount: Int
  favoriteCount: Int
}

input SyncYoutubeRepositoryVideoInput {
  videoId: String!
  position: Int
  title: String
  description: String
  type: YoutubeVideoType
  ctaButton: CTAButtonInput
  timestamp: String
  channelTitle: String
  thumbnailUrl: String
  statistics: StatisticsInput
}

input SyncYoutubeRepositoryInput {
  videos: [SyncYoutubeRepositoryVideoInput!]!
}

input SyncFacebookRepositoryVideoInput {
  videoId: String!
  permaLink: AWSURL!
  position: Int
  title: String
  description: String
  type: MetaVideoType
  ctaButton: CTAButtonInput
  timestamp: String
  sourceMediaUrl: String
  thumbnailUrl: String
  statistics: StatisticsInput
}

input SyncFacebookRepositoryInput {
  videos: [SyncFacebookRepositoryVideoInput!]!
}

input SyncInstagramRepositoryVideoInput {
  videoId: String!
  position: Int
  title: String
  description: String
  type: MetaVideoType
  ctaButton: CTAButtonInput
  timestamp: String
  sourceMediaUrl: String
  permaLink: AWSURL!
  thumbnailUrl: String
  statistics: StatisticsInput
}

input SyncInstagramRepositoryInput {
  videos: [SyncInstagramRepositoryVideoInput!]!
}

input SyncMediaRepositoryItemInput {
  type: MediaType
  mediaPath: String!
  thumbnailUrl: String
  name: String
  size: Float
  position: Int
}

input SyncLogoRepositoryItemInput {
  type: LogoType
  mediaPath: String!
  name: String
  size: Float
  position: Int
}

input SyncMediaRepositoryInput {
  mediaItems: [SyncMediaRepositoryItemInput!]!
}

input SyncLogoRepositoryInput {
  logoItems: [SyncLogoRepositoryItemInput!]!
}

input CTAButtonInput {
  text: String
  link: String
  isActive: Boolean
  type: CTAButtonType
}

input SyncCustomLinkInput {
  image: String
  title: String
  description: String
  linkType: CustomLinkType!
  link: AWSURL!
  ctaButton: CTAButtonInput
  secondaryLink: AWSURL
  isAffiliate: Boolean
  playStoreLink: AWSURL
  appStoreLink: AWSURL
  position: Int
}

input SyncCustomLinkRepositoryInput {
  links: [SyncCustomLinkInput!]!
}

input SortSubSectionsByPositionInput {
  id: String!
  enabled: Boolean!
}

input SortSubSectionsByPosition {
  subSectionIds: [SortSubSectionsByPositionInput!]!
}

input SortSectionsByPositionInput {
  id: String!
  isArchived: Boolean!
}

input SortSectionsByPosition {
  sectionIds: [SortSectionsByPositionInput!]!
}

input ContactFormInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  message: String
}

type URLMeta @aws_cognito_user_pools {
  title: String
  description: String
  image: String
}

type AnalyticsStatisticsResponseType {
  viewCount: Int
  likeCount: Int
  commentCount: Int
  dateLabel: String
}

type AnalyticsSexRatioResponseType {
  female: Float!
  male: Float!
}

type AnalyticsAgeGroupRatioResponseType {
  ageGroup: String!
  percentage: Float!
}

type AnalyticsResponseType {
  statistics: [AnalyticsStatisticsResponseType]
  topAudienceCities: [String]
  sexRatio: AnalyticsSexRatioResponseType
  ageGroupRatio: [AnalyticsAgeGroupRatioResponseType]
}

type AnalyticsResponse {
  code: String
  message: String
  payload: AnalyticsResponseType
}

type Query {
  getInfluencerBySlug(slug: ID!): Influencer
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: public }, { allow: private, provider: userPools }])

  syncInstagramAnalytics: AnalyticsResponse!
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])

  syncYoutubeAnalytics: AnalyticsResponse!
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])
}

type Mutation {
  syncYoutubeRepository(input: SyncYoutubeRepositoryInput!): SyncResponse!
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])

  createYoutubeItems(
    sectionId: ID!
    subSectionId: ID
    input: SyncYoutubeRepositoryInput!
  ): SyncResponse!
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])

  syncFacebookRepository(input: SyncFacebookRepositoryInput!): SyncResponse!
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])

  createFacebookItems(
    sectionId: ID!
    subSectionId: ID
    input: SyncFacebookRepositoryInput!
  ): SyncResponse!
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])

  syncInstagramRepository(input: SyncInstagramRepositoryInput!): SyncResponse!
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])

  createInstagramItems(
    sectionId: ID!
    subSectionId: ID
    input: SyncInstagramRepositoryInput!
  ): SyncResponse!
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])

  createMediaItems(
    sectionId: ID!
    subSectionId: ID
    input: SyncMediaRepositoryInput!
  ): SyncResponse!
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])

  createLogoItems(
    sectionId: ID!
    subSectionId: ID
    input: SyncLogoRepositoryInput!
  ): SyncResponse!
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])

  createCustomLinkItems(
    sectionId: ID!
    subSectionId: ID
    input: SyncCustomLinkRepositoryInput!
  ): SyncResponse!
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])

  getUrlMeta(link: AWSURL!): URLMeta
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])

  sortSubSectionByPosition(input: SortSubSectionsByPosition): SyncResponse!
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])

  sortSectionByPosition(input: SortSectionsByPosition): SyncResponse!
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])

  sendContactFormEmail(input: ContactFormInput): EmailResponse
    @function(name: "mywGraphqlLambdaResolver-${env}")
    @auth(rules: [{ allow: public }])
}
